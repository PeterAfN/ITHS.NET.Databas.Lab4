
1. Använd en databas med namn myDB.
use myDB
switched to db myDB


2. Skapa ett dokument med innehåll FirstName: ”Selma”, LastName: Lagerlöf
och sätt in det i en kollektion med namn ”authors”.
db.authors.insertOne({FirstName: "Selma", LastName: "Lagerlöf"});
{
        "acknowledged" : true,
        "insertedId" : ObjectId("600c16111512ec6012490a11")
}

3. Lägg till ytterligare ett dokument i ”authors” med FirstName: ”August”,
LastName: ”Bondeson”, Birth: 1854
db.authors.insertOne({FirstName: "August", LastName: "Bondeson", Birth: 1854});
{
        "acknowledged" : true,
        "insertedId" : ObjectId("600c196a1512ec6012490a12")
}


4. Uppdatera dokumentet för August Bondeson och lägg till Death: 1906 
db.authors.update({'_id' : ObjectId("600c196a1512ec6012490a12")}, 
                     {'$set' : {“Death”: 1906}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

5. Lägg till ytterligare författare i ”authors” genom att köra kommandot
load(”addAuthors.js”) från mongo Shell. (Ladda ner filen från ITHS Distans).
load("d:\addAuthors.js")
true

6. Räkna hur många dokument det finns totalt i ”authors”.
db.authors.find().count();
6

7. Räkna hur många författare som heter August i förnamn.
db.authors.find({FirstName: {$eq: "August"}}).count()
2

8. Lägg till Birth: 1858 och Death: 1940 för Selma Lagerlöf
db.authors.updateMany({FirstName: "Selma", LastName: "Lagerlöf"}, {$set: {Birth: 1858, Death: 1940}});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

9. Lägg till en array ”Books” för Selma Lagerlöf med följande böcker:
”Gösta Berlings saga”, ”En herrgårdssägen”,
”Nils Holgerssons underbara resa genom Sverige”
db.authors.update(
   { FirstName: "Selma", LastName: "Lagerlöf" },
   { $push: { Books: { $each: [ "Gösta Berlings saga", "En herrgårdssägen", "Nils Holgerssons underbara resa genom Sverige" ] } } }
);
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

10. Lägg till boken ”Vi på Saltkråkan” bland Astrid Lindgrens böcker.
db.authors.update(
      { "_id": ObjectId("600c2545fa884e224c6747f4") },
      {
          $push: {
              Books: "Vi på Saltkråkan"
          }
      }
  );
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

11. Ta bort boken ”Bröderna Lejonhjärta” från Astrid Lindgrens böcker.
db.authors.update( 
	{ "_id": ObjectId("600c2545fa884e224c6747f4") }, 
	{ $pull: { Books: "Bröderna Lejonhjärta" }} 
	);
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

12. Visa dokument för de författare som dog år 2000 eller senare.
db.authors.find( { Death: { $gt: 2000 } } ).pretty();
{
        "_id" : ObjectId("600c2545fa884e224c6747f4"),
        "FirstName" : "Astrid",
        "LastName" : "Lindgren",
        "Birth" : 1907,
        "Death" : 2002,
        "Books" : [
                "Här kommer Pippi Långstrump",
                "Mio min Mio",
                "Vi på Saltkråkan"
        ]
}

13. Räkna hur många författare som dog på 1940-talet.
db.authors.find( { Death: { $gt: 1939, $lt: 1950 } } );
{ "_id" : ObjectId("600c16111512ec6012490a11"), "FirstName" : "Selma", "LastName" : "Lagerlöf", "Birth" : 1858, "Death" : 1940, "Books" : [ "Gösta Berlings saga", "En herrgårdssägen", "Nils Holgerssons underbara resa genom Sverige" ] }
{ "_id" : ObjectId("600c2545fa884e224c6747f5"), "FirstName" : "Hjalmar", "LastName" : "Söderberg", "Birth" : 1869, "Death" : 1941, "Books" : [ "Den allvarsamma leken", "Martin Bircks ungdom", "Doktor Glas" ] }
{ "_id" : ObjectId("600c2545fa884e224c6747f6"), "FirstName" : "Karin", "LastName" : "Boye", "Birth" : 1900, "Death" : 1941, "Books" : [ "Samlade dikter", "Kallocain" ] }

14. Visa endast attributen FirstName, LastName och Death för de författare
som dog på 1940-talet.
db.authors.find( {Death: { $gt: 1939, $lt: 1950 }},{Birth:0, Books: 0, _id:0} ).pretty()
{ "FirstName" : "Selma", "LastName" : "Lagerlöf", "Death" : 1940 }
{ "FirstName" : "Hjalmar", "LastName" : "Söderberg", "Death" : 1941 }
{ "FirstName" : "Karin", "LastName" : "Boye", "Death" : 1941 }

15. Lägg till Gender: ”Male” i dokument med FirstName = ”Hjalmar”.
db.authors.updateOne({FirstName: "Hjalmar"}, {$set: {Gender: "Male"}});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }

16.Lägg till Gender: ”Female” i dokument där FirstName är Astrid, Karin eller Selma.
db.authors.updateMany( {FirstName: { $in: ["Astrid", "Karin", "Selma"] } }, {$set: {Gender: "Female"}})
{ "acknowledged" : true, "matchedCount" : 3, "modifiedCount" : 3 }

17. Ta bort arrayen Books från dokumentet med August Strindberg.
db.authors.update(
   { FirstName: "August", LastName: "Strindberg" },
   { $unset: { Books: 1 } }
);
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

18. Ta bort dokumenten där FirstName = ”August”. 
db.authors.remove( { FirstName: "August" } );
WriteResult({ "nRemoved" : 2 })

Använd dig av kollektionen listingsAndReviews i databasen sample_airbnb:
19. Ta ut (projicera) attributen name, price, och listing_url för de dokument med property_type: ”House” och som har följande amenities: "Pool", "Air conditioning", ”BBQ grill" och ”Gym”.

db.listingsAndReviews.aggregate([
	{ 
	$match: 
		{ 
			property_type: "House",
			amenities: { $all: ["Pool", "Air conditioning", "BBQ grill", "Gym"] },
		} 
	},
	{ $project: { name: 1, price: 1, listing_url:1} },
])
{ "_id" : "24999091", "listing_url" : "https://www.airbnb.com/rooms/24999091", "name" : "Puamana Resort #20-2", "price" : NumberDecimal("285.00") }
{ "_id" : "6665504", "listing_url" : "https://www.airbnb.com/rooms/6665504", "name" : "Waikiki Banyan Tower 2 Suite 1214", "price" : NumberDecimal("238.00") }
{ "_id" : "16885508", "listing_url" : "https://www.airbnb.com/rooms/16885508", "name" : "Private Family Retreat with Spa & Pool", "price" : NumberDecimal("249.00") }
{ "_id" : "2271702", "listing_url" : "https://www.airbnb.com/rooms/2271702", "name" : "LUXURY HOUSE IN BARRA DA TIJUCA", "price" : NumberDecimal("5502.00") }

Använd dig av kollektionen movies i databasen sample_mflix:
20. Räkna antalet filmer där Drew Barrymore spelar mot Adam Sandler.
db.movies.aggregate([
	{ 
	$match: 
		{ 
			cast: { $all: ["Drew Barrymore", "Adam Sandler"] },
		} 
	},
	{ $count: "Antal filmer där Drew Barrymore spelar mot Adam Sandler:" },
])
{ "Antal filmer där Drew Barrymore spelar mot Adam Sandler:" : 3 }

21. Gruppera på attribut ”rated”, räkna antal filmer i varje grupp och sortera
efter antal i fallande ordning (högst antal först).
db.movies.aggregate([
  { $project: { rated: 1, imdb: 1 } },
  { $unwind: "$rated" },
  { $group:
    { _id: "$rated",
      "Antal filmer:": { $sum: 1 }
    }
  },
  { $sort: { "Antal filmer:": -1 } }
] )
{ "_id" : "R", "Antal filmer:" : 5537 }
{ "_id" : "PG-13", "Antal filmer:" : 2321 }
{ "_id" : "PG", "Antal filmer:" : 1852 }
{ "_id" : "NOT RATED", "Antal filmer:" : 1354 }
{ "_id" : "UNRATED", "Antal filmer:" : 751 }
{ "_id" : "APPROVED", "Antal filmer:" : 709 }
{ "_id" : "G", "Antal filmer:" : 477 }
{ "_id" : "PASSED", "Antal filmer:" : 181 }
{ "_id" : "TV-14", "Antal filmer:" : 89 }
{ "_id" : "TV-PG", "Antal filmer:" : 76 }
{ "_id" : "TV-MA", "Antal filmer:" : 60 }
{ "_id" : "TV-G", "Antal filmer:" : 59 }
{ "_id" : "GP", "Antal filmer:" : 44 }
{ "_id" : "NC-17", "Antal filmer:" : 38 }
{ "_id" : "X", "Antal filmer:" : 38 }
{ "_id" : "M", "Antal filmer:" : 37 }
{ "_id" : "Approved", "Antal filmer:" : 5 }
{ "_id" : "AO", "Antal filmer:" : 3 }
{ "_id" : "TV-Y7", "Antal filmer:" : 3 }
{ "_id" : "OPEN", "Antal filmer:" : 1 }
{ "_id" : "Not Rated", "Antal filmer:" : 1 }

22. Ta fram antalet filmer med Harrison Ford, och det lägsta, det högsta, samt
genomsnittliga betyget bland dessa filmer på IMDB.
db.movies.aggregate([
	{ $match: { cast: { $all: ["Harrison Ford"] },} },
	{ "$group": {
		"_id": "Harrison Ford",
		"Antal filmer": { "$sum": 1 },
		"IMDB max": { "$max": "$imdb.rating" },
		"IMDB min": { "$min": "$imdb.rating" },
		"IMDB medel": { "$avg": "$imdb.rating" }
	}}
]).pretty()
{
        "_id" : "Harrison Ford",
        "Antal filmer" : 25,
        "IMDB max" : 8.8,
        "IMDB min" : 5.7,
        "IMDB medel" : 7.127999999999999
}

Använd dig av kollektionen sales i databasen sample_supplies:
23. Skapa en vy (view) med namn satisfaction som visar genomsnittlig satisfaction per gender och purchaseMethod. 
db.sales.aggregate( [
   {
     $group: {
        _id: {
           cust_gender: "$customer.gender",
           purchase_method: "$purchaseMethod"
        },
		"Average satisfaction": { "$avg": "$customer.satisfaction" }
     }
   }
])
{ "_id" : { "cust_gender" : "M", "purchase_method" : "Online" }, "Average satisfaction" : 3.788860103626943 }
{ "_id" : { "cust_gender" : "F", "purchase_method" : "Online" }, "Average satisfaction" : 3.7539975399753995 }
{ "_id" : { "cust_gender" : "F", "purchase_method" : "In store" }, "Average satisfaction" : 3.7902097902097904 }
{ "_id" : { "cust_gender" : "M", "purchase_method" : "In store" }, "Average satisfaction" : 3.802735781137509 }
{ "_id" : { "cust_gender" : "M", "purchase_method" : "Phone" }, "Average satisfaction" : 3.8974358974358974 }
{ "_id" : { "cust_gender" : "F", "purchase_method" : "Phone" }, "Average satisfaction" : 3.7711267605633805 }

